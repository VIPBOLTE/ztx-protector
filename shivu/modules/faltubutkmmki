from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler, CallbackContext
from telegram import Update
from Sanatan import user_collection, collection, application
import math
from html import escape
from itertools import groupby


# Harem Command
async def hharem(update: Update, context: CallbackContext, page=0, edit=False) -> None:
    user_id = update.effective_user.id

    # Define a mapping dictionary for harem modes to rarity values
    harem_mode_mapping = {
        "COMMON": "🟡 COMMON",
        "RARE": "🔴 RARE",
        "LEGENDARY": "⭐ LEGENDARY",
        "SPECIAL": "💮 SPECIAL",
        "WINTER": "❄️ WINTER",
        "SUMMER": "🏖️ SUMMER",
        "VALENTINE": "💞 VALENTINE",
        "OMNIVERSE": "🏅 OMNIVERSE",
        "CHIBI": "👼 CHIBI",
        "HALLOWEEN": "🏰 HALLOWEEN",
        "default": None
    }

    user = await user_collection.find_one({'id': user_id})
    if not user:
        await update.message.reply_text("𝐘𝐨𝐮 𝐧𝐞𝐞𝐝 𝐭𝐨 𝐫𝐞𝐠𝐢𝐬𝐭𝐞𝐫 𝐟𝐢𝐫𝐬𝐭 𝐛𝐲 𝐬𝐭𝐚𝐫𝐭𝐢𝐧𝐠 𝐭𝐡𝐞 𝐛𝐨𝐭 𝐢𝐧 𝐝𝐦.")
        return

    characters = user.get('characters', [])
    fav_character_id = user.get('favorites', [])[0] if 'favorites' in user else None
    fav_character = None

    if fav_character_id:
        for c in characters:
            if isinstance(c, dict) and c.get('id') == fav_character_id:
                fav_character = c
                break

    hmode = user.get('hhmode')
    if hmode == "default" or hmode is None:
        characters = [char for char in characters if isinstance(char, dict)]
        characters = sorted(characters, key=lambda x: (x.get('anime', ''), x.get('id', '')))

        rarity_value = "all"
    else:
        rarity_value = harem_mode_mapping.get(hmode, "Unknown Rarity")
        characters = [
            char for char in characters if isinstance(char, dict) and char.get('rarity') == rarity_value
        ]
        characters = sorted(characters, key=lambda x: (x.get('anime', ''), x.get('id', '')))

    if not characters:
        await update.message.reply_text(
            f"ʏᴏᴜ ᴅᴏɴ'ᴛ ʜᴀᴠᴇ ᴀɴʏ ({rarity_value}) ʜᴜsʙᴀɴᴅᴏ. ᴘʟᴇᴀsᴇ ᴄʜᴀɴɢᴇ ɪᴛ ғʀᴏᴍ /hhmode."
        )
        return

    character_counts = {k: len(list(v)) for k, v in groupby(characters, key=lambda x: x['id'])}
    total_pages = math.ceil(len(characters) / 10)
    if page < 0 or page >= total_pages:
        page = 0

    harem_message = (
        f"<b>{escape(update.effective_user.first_name)}'s ({rarity_value}) Husbando's - Page {page + 1}/{total_pages}</b>\n"
    )
    current_characters = characters[page * 10:(page + 1) * 10]
    current_grouped_characters = {k: list(v) for k, v in groupby(current_characters, key=lambda x: x['anime'])}

    # Set to keep track of characters already included in the message
    included_characters = set()

    for anime, characters in current_grouped_characters.items():
        user_anime_count = len(
            [char for char in user['characters'] if isinstance(char, dict) and char.get('anime') == anime]
        )
        total_anime_count = await collection.count_documents({"anime": anime})
        harem_message += f'\n◆ <b>{anime} 〔{user_anime_count}/{total_anime_count}〕</b>\n'

        for character in characters:
            if character['id'] not in included_characters:
                count = character_counts[character['id']]
                formatted_id = f"{int(character['id']):04d}"
                harem_message += f'➹ : <b>{character["id"]} ⌠ {character["rarity"][0]} ⌡ {character["name"]} ×{count}</b>\n'
                included_characters.add(character['id'])

    # Prepare fixed grid layout for buttons
    keyboard = [
        [InlineKeyboardButton("𝗵𝘂𝘀𝗯𝗮𝗻𝗱𝗼", switch_inline_query_current_chat=f"collection.{user_id}")],
    ]

    # If multiple pages, add navigation buttons
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("ᴘᴇᴠ", callback_data=f"harem:{page - 1}:{user_id}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("ɴᴇxᴛ", callback_data=f"harem:{page + 1}:{user_id}"))
        keyboard.append(nav_buttons)

    reply_markup = InlineKeyboardMarkup(keyboard)
    message = update.message or update.callback_query.message

    # Send message with static buttons layout
    if fav_character and 'img_url' in fav_character:
        if edit:
            await message.edit_caption(caption=harem_message, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await message.reply_photo(photo=fav_character['img_url'], caption=harem_message, parse_mode='HTML', reply_markup=reply_markup)
    else:
        if edit:
            await message.edit_caption(caption=harem_message, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await message.reply_text(harem_message, parse_mode='HTML', reply_markup=reply_markup)


# Set Hhmode
async def set_hhmode(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    user = await user_collection.find_one({'id': user_id})
    current_harem_mode = user.get('hhmode', 'default')  # Get the current harem mode

    # Dynamic rarity buttons based on current harem mode
    harem_mode_mapping = {
        "COMMON": "🟡 COMMON",
        "RARE": "🔴 RARE",
        "LEGENDARY": "⭐ LEGENDARY",
        "SPECIAL": "💮 SPECIAL",
        "WINTER": "❄️ WINTER",
        "SUMMER": "🏖️ SUMMER",
        "VALENTINE": "💞 VALENTINE",
        "OMNIVERSE": "🏅 OMNIVERSE",
        "CHIBI": "👼 CHIBI",
        "HALLOWEEN": "🏰 HALLOWEEN",
    }

    # Generate buttons for rarity
    rarity_buttons = [
        InlineKeyboardButton(harem_mode_mapping.get(mode, mode), callback_data=mode)
        for mode in harem_mode_mapping
    ]

    # Group buttons into rows (fixed number of buttons per row)
    button_rows = [
        rarity_buttons[i:i + 5]  # 5 buttons per row, adjust this number as per your layout needs
        for i in range(0, len(rarity_buttons), 5)
    ]

    # Fixed keyboard layout with the "Change Husbando Sorting Mode" button
    keyboard = [
        [InlineKeyboardButton("Change Husbando Sorting Mode", callback_data="rarity")],
        *button_rows,  # Add button rows to the keyboard
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Send photo and message with the fixed layout
    await update.message.reply_photo(
        photo="https://unitedcamps.in/Images/file_5261.jpg",  # Image can be dynamic
        caption=f"Change Husbando Sorting Mode To: {harem_mode_mapping.get(current_harem_mode, 'default')}",
        reply_markup=reply_markup,
    )


# Handle when a rarity button is clicked
async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    data = query.data
    
    if data == "rarity":
        await set_hhmode(update, context)
        return

    # Update the rarity mode for the user in the database
    await user_collection.update_one({'id': user_id}, {'$set': {'hhmode': data}})

    # Rarity mapping for buttons
    harem_mode_mapping = {
        "COMMON": "🟡 COMMON",
        "RARE": "🔴 RARE",
        "LEGENDARY": "⭐ LEGENDARY",
        "SPECIAL": "💮 SPECIAL",
        "WINTER": "❄️ WINTER",
        "SUMMER": "🏖️ SUMMER",
        "VALENTINE": "💞 VALENTINE",
        "OMNIVERSE": "🏅 OMNIVERSE",
        "CHIBI": "👼 CHIBI",
        "HALLOWEEN": "🏰 HALLOWEEN",
    }

    # Generate buttons for rarity
    rarity_buttons = [
        InlineKeyboardButton(harem_mode_mapping.get(mode, mode), callback_data=mode)
        for mode in harem_mode_mapping
    ]

    # Group buttons into rows (fixed number of buttons per row)
    button_rows = [
        rarity_buttons[i:i + 5]  # 5 buttons per row
        for i in range(0, len(rarity_buttons), 5)
    ]

    # Fixed keyboard layout with updated caption
    keyboard = [
        [InlineKeyboardButton("Change Husbando Sorting Mode", callback_data="rarity")],
        *button_rows,  # Add button rows
    ]

    # Update message caption with the new rarity
    await query.edit_message_caption(
        caption=f"Change Husbando Sorting Mode To: {harem_mode_mapping.get(data, 'default')}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    await query.answer()


# Add handler for button clicks and command
application.add_handler(CommandHandler("hharem", hharem))
application.add_handler(CommandHandler("hhmode", set_hhmode))
application.add_handler(CallbackQueryHandler(button, pattern="^rarity$|^COMMON$|^RARE$|^LEGENDARY$|^SPECIAL$|^WINTER$|^SUMMER$|^VALENTINE$|^OMNIVERSE$|^CHIBI$|^HALLOWEEN$"))
